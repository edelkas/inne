Eddy's TODO list for inne:

- ADD NEW COMMANDS TO HELP / README
- In "parse_player", we should check for an identified player name for a given user first, and THEN for the actual user name. This is because, if someone identifies, we should give priority to that name, even if it differs from their actual username.
- Restart process when it gets killed, maybe even restart it daily to prevent the memory leak.
- Distribution of scores: top20 episode distribution = first show some stats regarding top20s per episode (most top20s in an ep, least, average, etc), then a file with all episodes sorted by # of top20s). Parameters: type, rank (top20, 0th, etc), distribution type (by episodes, by rows, by tabs).
- Restrict display names to ASCII only
- For Archive scores function: Make sure to sort ties in descending order by using the replay id.
- Improve the migration of video challenges to the database: Parse the spreadsheet directly, otherwise it takes longer to update it and it doesn't work unless you have the csv files, which are not in the github repo.
- Suggestion: Change Steam ID when we get the Bad Gateway error, since I think it depends on the player and thus we might benefit from a new ID, although we don't want to lose the other one since we know it's active, so maybe we could keep a cache of recently active Steam IDs that lasts, say, 1 hour. Another idea is to have a column in the database "last seen active" that we could refer to for this purpose.
- "nevermind": delete last inne message prompted by that user.
- Implement "index" (maybe "tally"): Outputs file with a list (like "list") of something, like all 0ths. With a parameter we specify what, for instance, 0th scores or 0th frames. With another parameter we specify the order, like the natural one, or by score in descending order...
- Compare local scores (nprofile) vs server scores to find differences, a la NReality Score Comparer.
- Add total <rank> score, and show total score and total 19th score gained daily and weekly.
- Compile usage stats (number of pings, most used commands, data uploaded / downloaded, etc).
- Screenscores for userlevels.
- Add "maxed" and "maxable" to "list" and "how many". Also, add "full" and "global" to "maxed" and "maxable".
- Add "ownage" and others to "table".
- In "spread", when nth score doesn't exist, just take the last one. Apply to userlevels version too.
- Perhaps add rank to how many function, i.e. "username has n/N top20 scores (ranked kth)".
- Report: Add # of 0ths, i.e., "â€¢ There were 23 new scores by 9 players in 18 levels, making the boards 15.083 seconds harder including X new 0ths increasing the total 0th score by 1.050 seconds."
- Save how many times each streamer has streamed the game, and perhaps indicate it somehow if it's among the top ones (dope gamer alert!)
- For secret levels, also parse old level names (e.g. ?-X-02-03), probably using a new field, filled only for secret levels.
- Command to update certain userlevels (e.g. within a range, from a author, etc., with some hard limit e.g. 50, perhaps a cooldown).
- Add another fruit for potatoing nv2
- Make a tool to auto-patch npp.dll and MITM so that we can e.g. send custom userlevel searches.
- Add amount of scores each board has (we can find this out with LittleNinjaThatTried and similar ideas).
- Add other versions? (v1.4, v2.0, etc)
- Use OilyPNG for screenshot generation rather than ChunkPNG for faster speeds (look into other gems too, as well as vector graphics).
- "nubs" command to show ignored hackers and cheaters
- Allow to add "rankings" to any userlevel query (browse) to instead perform rankings on the result set.
- Userlevels: find full author name (instead of 16 char truncation), and add exact matching when browsing
- Use author IDs for userlevel functions as well (asking for scores, ranks, etc), without using quotes to distinguish. Perhaps the same could be done for Metanet functions, although since we don't use quotes by default, we'd first do an author lookup, and if it doesn't exist and the string is purely a number, we do a player ID search.
- Add regex to functions (userlevel search, etc)
- aliases: Make sure they cannot be repeated. Add edit/remove alias functions only for botmaster.
- In spread function, if rank == 19, assume it means "last", so that it works in boards with hacked scores. Perhaps do that for 18 (2nd from last), etc. At some point the pattern needs to break, though.
- Personal demo analysis function (for when a run is not in the global leaderboard)
- Browse uncleared userlevels (levels with no completions)
- Unmaxed missing (ignore maxes in missing)
- Add "graphic" / "screenshot" parameter to many commands which output level lists, so that instead of the list, we get images with thumbnails of 5/10 levels, with arrow button navigation to move, a-la userlevel browse.
- Fix dashless ids (episodes starting with 10/11 are being recognized as level 1-0 and 1-1 instead).
- Add access to all functions using slash commands
- Multiple matches:
  * Add for player names
  * kk's suggestion: nav bar for matches, navigate screenies etc
- Userlevel tabs not working correctly? (dupped levels in top weekly, what about featured, etc)
- Handle cheaters within database (rather than via hardcoding in source code), have botmaster function to add cheaters, etc
- If no author results, truncate to first 16 chars and try again.
- Histograms of userlevels played by ID (perhaps also chart anything, e.g. 0ths, top10s, parse_range)
- Analysis:
  * Use framecount and gold fields from archives table, rather than computing it again
  * Implement for episodes and stories
- "percent" for table
- fix hc replays in db (I'm only saving the first 25, but deaths are included)
- hc cleanliness and others
- maybe modify function 'nav' from 'HighScore' module to allow for arbitrary offsets, and have some special sign to denote 'first' and 'last'
- modify rankings in models.rb to return player names rather than player objects, do it efficiently by querying for players JOINS users to find potential display names, check LOG_SQL to minimize queries
- add "full" to everything that outputs lists (spreads, missing, etc), maybe nav too
- add "suggestions" command (random selection of scores the player doesn't have)
- allow "missing" parameter in table, just like in "how many" or "list"
- use Score.filter with a Player for some of the Player methods, like range_ns, improvable, table...
- add Score::filter to rank_exclude
- CKC rankings weighed by the number of cool kids in each board
- Have all people tied in rankings have the same rank, with hyphens. Show slightly over 20 if tied at the bottom, up to another limit, like 25.
- In order to sort ties, rather than alphabetical, use chronological. For simplicity, use date of most recent 0th, rather than the whole history.
- Fix random userlevel function, the new send_userlevel_individual approach broke it.
- Send message if the command was not understood, i.e., if no function was executed. We can do this by having a flag that each function sets to true when it's executed, and then check it at the end. We can also use this flag to prevent executing 2 functions on the same command, which means we could also control the flow by changing the order of the function calls at the bottom.


\\ ------------------------ Art ------------------------
- Use different objects for different colors.
- Create a custom palette that best fits the image.
- Dithering.

\\ ------------------------ Current ------------------------
- Improve help (add command list, add help menu for each command).

\\ ------------------------ Userlevels ------------------------

- Usernames are being truncated.
- We need to update all maps regularly, for the ++'s, etc.
- Userlevel of the day (filter by levels with at least n scores and at least a certain delta of scores to prevent impossible and maxed levels)
- Unify names: Authors who have changed username, group by author id and change all names to the most recent one. BUT keep old names in the alias table.
- Add Metanet levels to the db.

Less priority:
- Short/compact search mode (apt for mobile; show only ID, name and author; shorter truncations)
- Missing
- NUMA-esque features: We could have a command (e.g. "post") that prints the userlevel info (name, author, screenshot, etc) and adds buttons to cast a vote (we keep track of the users so that a single vote can be casted per Discord user), as well as a text input to put a comment (or perhaps, save a conversation regarding a userlevel as the "comment section" of that map, somehow), ec
- Demo analysis.
- Userlevel rankings by page (featured, best, hardest, etc.). Also, the special hardest rankings with point ponderation.
- Imagesearch: Show pictures of results (miniature) instead of text.
- Userlevel stats: How many unique authors, maps, averages, etc. Break down by mode and total.
- When an ID is not in the database, if it's close (or always), download newest, but without printing it.
- Store a daily list of all top 50 userlevels (just ID's for instance), so we can see how the hardest levels evolve.
- Map Steam ID's to player names by looking it up in the database, so that they can be used when searching the server / database.
- Browse user dependant categories
- Browse other (made up but interesting) categories
- Download maps (plural), like, all maps by an author or something.
- Add a command to the browse/search function, that formats level names with underscores instead of spaces, so that they can be readily copied and pasted to N++.
- Upload maps to accounts (need to figure out request by using proxy first)
- Map editor with slots for each user
- Comparison function (like for Metanet scores). Be able to filter maps by author, name, etc.

Database:

- Change format of stored dates to be UNIX time, or something consistent.
- Make option to switch between an online search to N++ server, and an offline search in the local database. Make local default, since it faster, but have a parameter to switch to online mode.

Others:
- Add the possibility of making secondary orders (to break ties).

\\ ------------------------ Scores ------------------------

- Ping players who lost 0ths, using the previous function.

\\ ------------------------ Screenshots ------------------------

- Regular doors aren't being placed correctly, sometimes at least, see e.g. 42069, in which horizontal doors are shifted half a tile up, and vertical doos are shifted half a tile to the left. There have been more examples.
- For tile borders, rather than placing them in the center, move them inside the tile so that they don't protrude.
- Show glitch tiles with some soft shade, e.g. red or the inverse of the background, perhaps with a pattern too, e.g. lines or dotted.
- If palette name is incorrect, use string distance to try to find a good match. If not, don't bother showing list of closest matches, just default to vasquez.

Default palettes:
- 2 votes for classic, 5 for vasquez, 5 for random
- Add an option to set default palette for each user
- Add a note when screenshots are published, that indicates the commands to specify the palette, so that new users know about it. Also, the command to set default palette.
- Add custom palettes, but not in the randomized
- Generate a gif with one palette per frame

\\ ------------------------ Total Scores ------------------------
- Create 2 tables: Levels and Episodes. One row per player, one column per level/episode. The idea is to keep the bot running 24/7, cycling through Steam ID's until an active one is found, and then latch onto that player and start downloading his scores. First, download those which have not yet been downloaded, and after that's done, keep downloading them, but not willy nilly, instead, also save the date at which each score was downloaded, and always update the scores in chronological order of last updated. Eventually, the goal is to have all scores by all players (in the list), and have them as updated as possible (even if they haven't completed the level).

\\ ------------------------ Replays ------------------------

- Generate attract files from Metanet level & userlevel replays, as a way to keep demos.
- Implement demo analysis to attract files, which requires to find a way for the bot to download files uploaded by people.

Analysis:

- Prettify format (aligment).
- Error checking before using Zlib, in case of erroneous download.
- Don't break the whole function if one download failed: retry, or skip to the next one.
- Compare inputs of two runs like github does, also maybe do this comparison by just specifying changes (*read below*)

\\ ------------------------ History ------------------------
-- Fix the doubling through code, by halving the older scores.
-- Add the possibility of limiting the scope of graphs (upper bound of y axis), using an additional parameters to the user command (e.g. "intro history 100"). In this case, if some player doesn't even appear in the graph because he's above it, maybe delete him from the legend and add new players. This adds an aditional difficulty since it's not just changing the y axis, but also changing the players to be plotted. To do so, the maximum would have to be computed first, and then decide which players are to be plotted.
-- Medium priority: Another solution for the above problem: Use logarithmic scale.
-- Manually join players that changed username (e.g. Maelstrom=drunk driver=asleep at the wheel=coronavirus).
-- Add some chronological marks in the x axis (at least years, if not months). Maybe more and better marks in the y axis too.
-- Retroactively delete (in the code, not the database) ignored players, like Mishu.
-- Medium priority: Figure out what causes the sudden drops in the graphs, and fix it.
-- Low priotity: Select the number of players to be plotted, or the minimum number of 0ths to select such players, using user input. This would have to be limited with some hardcoded constants to prevent spam or a computation overload).
-- Low priotity: Improve legend (align players and put on the side instead of top, maybe put maxes next to them).
-- Low priotity: Overall improvements to style (frame graph, and other decorations).

\\ ------------------------ Cheaters ------------------------


\\ ------------------------ Hardcore ------------------------

- Cleanliness, splits, and other functions.

\\ ------------------------ Humanlike features ------------------------

- Add guessing game: inne shows a picture of a level and people must figure out the level (by typing the name or level code). Maybe different difficulty settings, the easy one being a full picture and hard one being a section only, maybe ensuring that this section makes sense somehow (ie. it's not just empty space). Since we need to hold state, make sure you can run the game in a thread, with a limit of maybe 5 simultaneous games.
- Add some backstory, like what happens when outte is asked about inne (murder?)
- Add some more easter eggs, like a command that shows (or links) eddysipw, or a very small chance that a drone in a screenshot is dronexd or the ninja has eyes (see gofish meme).

Avatar:
- Ensure the random avatar can't repeat when faceswapping. In order to do so, we could save the current filename of the avatar in the GlobalProperties table of the database, and reject the current one before sampling the files in the avatar folder.
- Maybe also store the date of the avatar change to avoid the cooldown.

\\ ------------------------ General ------------------------

- Tie breaker for rankings: Average rank, instead of random.
- Add coop and race for some functions, like screenshots
- Maybe change "total score" to default to TLS instead of TLS + TES, which doesn't make much sense.
- SAVEFILE PARSER, ability to send inne your savefile and use it to elaborate completion leaderboards and whatnot (ask CCS if he ever finished it).
- Interesting: Analyze how do coop demos work. Then, to compare individual demos on the same level, download 2 of them and build an attrac file to run the replay in N++'s menu.
- Add help for each command, e.g., "help rankings".
* Customize "list" even further.
- 0th/Top20 changes (new ones, and per player).
- Comparison between players.
- Charts with colors.
- Some methods are duplicated in messages and inne++ files, like 'send_screenshot' or 'send_diff', Â¿what to do here, delete the one in inne++ (which is not being used)?

- Possibility to return lists in order of level and not rank.
- For "splits", also download episode 0th replay and parse it to get the actual 0th splits, so that we can compare the 0th splits with the ideal splits we are currently producing by adding up the level 0ths. This isn't actually possible unless we assume G++, which we can check by adding up.
- Implement "missing" in the "list" function, so that we could get "bottom 5 list for jirka that I don't already have".
- Unique 0th holders.
- 0th rankings ignoring certain players.
- Add relaxed episode ownages (without episode), and ownages with ties.

\\ ------------------------ NPC ------------------------

- Add 2 color boxes, to change every instance of color 1 in the palette by color 2.


\\ ------------------------ Notes ------------------------

*below*

"holds jump for 1 less frame, switches right for 2 frames then left until end", or in oter words, "as long as the difference between two inputs is the same as in the previous frame, discard it, as you said"
